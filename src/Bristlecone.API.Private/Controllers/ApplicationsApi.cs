/*
 * Application Microservice
 *
 * Manage and process applications
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.SwaggerGen.Annotations;
using Bristlecone.ViewModels.DTO;
using Bristlecone.ServiceLayer.Interfaces;
using System.Threading.Tasks;
using AutoMapper;
using System.Net;
using Microsoft.AspNetCore.Http.Extensions;

namespace IO.Swagger.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    public class ApplicationsApiController : Controller
    {
        private readonly IApplicationService _applicationService;

        public ApplicationsApiController(IApplicationService applicationService)
        {
            _applicationService = applicationService;
        }

        /// <summary>
        /// Applications assocaited with the API consumer
        /// </summary>
        /// <remarks>Returns information about the applications requested. </remarks>
        /// <param name="ids">Application ids to query for application information</param>
        /// <response code="200">An array of applications</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/v1/application")]
        [SwaggerOperation("ApplicationGet")]
        [ProducesResponseType(typeof(ApplicationDTO), 200)]
        public async Task<IActionResult> ApplicationGet([FromQuery]List<string> ids)
        {
            var response = await _applicationService.GetApplicationsAsync(ids);

            if (response == null)
                return NotFound();

            return Ok(response);
        }


        /// <summary>
        /// Creates a new application
        /// </summary>
        /// <remarks>Creates a new application </remarks>
        /// <param name="body">All of the information required about an applicant</param>
        /// <response code="200">Application response</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("/v1/application")]
        [SwaggerOperation("ApplicationPost")]
        [ProducesResponseType(typeof(ApplicationDTO), 200)]
        public async Task<IActionResult> ApplicationPost([FromBody]NewApplicationDTO newApplicationDTO)
        {
            if (!ModelState.IsValid || newApplicationDTO == null)
                return BadRequest("NewApplicationDTO");

            var applicationDto = Mapper.Map<NewApplicationDTO, ApplicationDTO>(newApplicationDTO);

            var response = await _applicationService.CreateApplicationAsync(applicationDto);

            if (response.ReturnObject != null && response.StatusCode == HttpStatusCode.Created)
                return Created($"{Request.GetDisplayUrl()}/{response.Id}", response);

            return BadRequest(response.Message);
        }


        /// <summary>
        /// Updates an application
        /// </summary>
        /// <remarks>Updates an application </remarks>
        /// <param name="application">All of the information about an application</param>
        /// <response code="200">Application response</response>
        /// <response code="0">Unexpected error</response>
        [HttpPut]
        [Route("/v1/application")]
        [SwaggerOperation("ApplicationPut")]
        [ProducesResponseType(typeof(ApplicationDTO), 200)]
        public async Task<IActionResult> ApplicationPut([FromBody]ApplicationDTO application)
        {
            if (!ModelState.IsValid || application == null)
                return BadRequest("ApplicationDTO");


            var response = await _applicationService.UpdateApplicationAsync(application);

            if (response.ReturnObject != null && response.StatusCode == HttpStatusCode.OK)
                return Ok(response.ReturnObject);

            if (response.StatusCode == HttpStatusCode.NotFound)
                return NotFound();

            return BadRequest(response.Message);
        }
    }
}
